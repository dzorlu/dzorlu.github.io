[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tinkerings",
    "section": "",
    "text": "My notes to build mental models for how things work.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpert Parallel\n\n\n\n\n\n\n\n\nSep 1, 2025\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/expert_parallel.html",
    "href": "posts/expert_parallel.html",
    "title": "Expert Parallel",
    "section": "",
    "text": "Let’s distill how to run a Mixture-of-Experts (MoE) model on 8 GPUs using a 2-D device mesh with Expert Parallel (EP) and FSDP2 (fully_shard). This short post explains who stores which weights, where all-to-all happens, and includes minimal code (meshes, wrapping, verification)."
  },
  {
    "objectID": "posts/expert_parallel.html#tldr",
    "href": "posts/expert_parallel.html#tldr",
    "title": "Expert Parallel",
    "section": "TL;DR",
    "text": "TL;DR\n\nColumns move tokens. Rows share weights.\nCols (dp_shard_in_ep) = EP axis → which experts live where + token all-to-all.\nRows (dp_shard_mod_ep) = FSDP axis → how owned experts are sharded.\nNon-MoE: FSDP(8) across all ranks (no persistent replication).\nExperts: EP(2) across columns (ownership) × FSDP(4) across rows (shards).\nEP all-to-all is row-local pairs: (0↔︎1), (2↔︎3), (4↔︎5), (6↔︎7). Microbatches can differ (variable-size A2A handles it)."
  },
  {
    "objectID": "posts/expert_parallel.html#device-mesh-rank-layout",
    "href": "posts/expert_parallel.html#device-mesh-rank-layout",
    "title": "Expert Parallel",
    "section": "Device Mesh & Rank Layout",
    "text": "Device Mesh & Rank Layout\nArrange 8 GPUs as a 4×2 grid:\n(rows, cols) → rank\n(0,0)→0   (0,1)→1\n(1,0)→2   (1,1)→3\n(2,0)→4   (2,1)→5\n(3,0)→6   (3,1)→7\n\nRows (dp_shard_mod_ep) size 4 → FSDP sharding axis for experts.\nCols (dp_shard_in_ep) size 2 → EP ownership + row-local all-to-all.\nFlattened dp view (rows×cols) size 8 → dataloader + FSDP for non-MoE.\n\nHere is the pytorch code.\n    dp_shard_in_ep = ep_size                # borrowed by EP (forms EP groups)\n    dp_shard_mod_ep = dp_shard // ep_size   # leftover for FSDP sharding. borrowing!\n\n\n\n    # Create the 2D mesh\n    device_mesh = init_device_mesh(\n        \"cuda\",\n        (dp_shard_mod_ep, dp_shard_in_ep),\n        mesh_dim_names=(\"dp_shard\", \"ep\"),\n    )\n\n    # Create aliases for DP\n    # DP will be used for data loading\n    device_mesh[(\"dp_shard\", \"ep\")]._flatten(mesh_dim_name=\"dp\")\n\n    dp_mesh  = device_mesh[\"dp\"]     # size = R*C = 8  -&gt; used for non-MoE FSDP\n    row_mesh = device_mesh[\"dp_shard\"]   # size = R   = 4  -&gt; used for expert FSDP (inside each column)\n    col_mesh = device_mesh[\"ep\"]   # size = C   = 2  -&gt; used for EP ownership + a2a"
  },
  {
    "objectID": "posts/expert_parallel.html#who-stores-which-expert",
    "href": "posts/expert_parallel.html#who-stores-which-expert",
    "title": "Expert Parallel",
    "section": "Who Stores Which Expert?",
    "text": "Who Stores Which Expert?\nAssume 8 experts E0..E7. With EP=2: - Column 0 owns experts E0–E3 (no copy of E4–E7). - Column 1 owns experts E4–E7 (no copy of E0–E3). - Inside each column, FSDP(4) shards the owned experts across the 4 rows.\n\n\n\nRank\nColumn owns\nThis rank holds (expert weights)\n\n\n\n\n0 = (0,0)\nE0–E3\n1/4 shard of E0–E3\n\n\n2 = (1,0)\nE0–E3\n1/4 shard of E0–E3\n\n\n4 = (2,0)\nE0–E3\n1/4 shard of E0–E3\n\n\n6 = (3,0)\nE0–E3\n1/4 shard of E0–E3\n\n\n1 = (0,1)\nE4–E7\n1/4 shard of E4–E7\n\n\n3 = (1,1)\nE4–E7\n1/4 shard of E4–E7\n\n\n5 = (2,1)\nE4–E7\n1/4 shard of E4–E7\n\n\n7 = (3,1)\nE4–E7\n1/4 shard of E4–E7\n\n\n\nNon-MoE (embeddings, attention, MLP, norms) are FSDP-sharded 8-way across all ranks (flattened dp). There is no persistent replication."
  },
  {
    "objectID": "posts/expert_parallel.html#where-does-all-to-all-happen",
    "href": "posts/expert_parallel.html#where-does-all-to-all-happen",
    "title": "Expert Parallel",
    "section": "Where Does All-to-All Happen?",
    "text": "Where Does All-to-All Happen?\nEP all-to-all is row-local:\n\nRow 0: GPU0 ⇄ GPU1\nRow 1: GPU2 ⇄ GPU3\nRow 2: GPU4 ⇄ GPU5\nRow 3: GPU6 ⇄ GPU7\n\nEach rank runs the router on its own microbatch. Tokens are split by destination column (owner of the chosen expert), then a size-exchange + variable-size all-to-all exchanges exactly those slices between the two columns in the same row. Different microbatches are fine.\nAfter dispatch, each rank holds only tokens for experts it owns. Expert matmuls then use FSDP across the 4 rows in that column (all-gather → compute → reduce-scatter). Finally, the inverse all-to-all returns outputs to the source ranks.\nLet’s illustrate the token dispatch operation with a well-annotated code snippet.\n    def _token_dispatch(self, model, inputs, device_mesh):\n        \"\"\"\n            All-to-all communication\n            input_splits is different coming from each device (assuming some data parallelism)\n        \"\"\"\n        ep_size = device_mesh.shape[0]\n        x_gathered, num_tokens_per_expert = inputs\n        num_tokens_per_expert_group = num_tokens_per_expert.new_empty(\n            num_tokens_per_expert.shape[0]\n        )\n\n        # distributed transpose operation.\n        # 0th GPU gets all 0th row\n\n        # Preliminary all-to-all to exchange token counts. This is used to\n        # calculate the split sizes for the main token all-to-all dispatch.\n        #\n        # Before (on GPU 0):\n        #   `num_tokens_per_expert`: [10, 5, 12, 8, 11, 6, 13, 7]\n        #   (Counts of local tokens for all 8 global experts)\n        #\n        # After (on GPU 0, which hosts experts 0 and 1):\n        #   `num_tokens_per_expert_group` is filled with:\n        #   [10, 5, | 9, 4, | 14, 2, | 3, 11]\n        #   (Counts for my local experts [E0,E1] from GPU0, GPU1, GPU2, GPU3)\n        \n        dist.all_to_all_single(\n            num_tokens_per_expert_group, # output!\n            num_tokens_per_expert, # input\n            group=device_mesh.get_group(),\n        )\n\n\n        input_splits = num_tokens_per_expert.view(\n            ep_size, -1\n        ).sum(dim=1).to(torch.device(\"cpu\"))\n\n        output_splits = num_tokens_per_expert_group.view(\n            ep_size, -1\n        ).sum(dim=1).to(torch.device(\"cpu\"))\n\n        self.input_splits = input_splits.tolist()\n        self.output_splits = output_splits.tolist()\n\n        # this is an uneven communication (e.g. ragged), where each GPU receives an uneven amount of tokens.\n\n        # On GPU 0:\n        # - Total tokens before send (sum of num_tokens_per_expert): 72\n        # - input_splits (how to slice the 72 tokens for sending): [15, 20, 17, 20]\n        # - output_splits (how many tokens to expect from each GPU): [15, 13, 16, 14]\n\n        # Before all_to_all, each GPU has a different number of tokens and a different plan:\n        # GPU 0: tensor of size 72, sends chunks of [15, 20, 17, 20]\n        # GPU 1: (example) tensor of size 80, sends chunks of [13, 25, 22, 20]\n        # GPU 2: (example) tensor of size 75, sends chunks of [16, 18, 21, 20]\n        # GPU 3: (example) tensor of size 68, sends chunks of [14, 15, 19, 20]\n\n        # After all_to_all on GPU 0:\n        # - Receives: 15 from GPU0, 13 from GPU1, 16 from GPU2, 14 from GPU3\n        # - Output tensor size = sum(output_splits) = 15 + 13 + 16 + 14 = 58\n        # - This new tensor of 58 tokens contains data for GPU 0's local experts (E0, E1),\n        #   but is grouped by source GPU, not by expert ID. It needs a local shuffle.\n\n        # all_to_all_single_autograd allows differentiable data transfer\n        print(f\"{self.output_splits=} {self.input_splits=}\")\n\n        x_gathered = all_to_all_single_autograd(\n            x_gathered,\n            self.output_splits,\n            self.input_splits,\n            device_mesh.get_group(),\n        )\n\n        # num_tokens_per_expert_group\n        #   [10, 5, | 9, 4, | 14, 2, | 3, 11]\n        # \n        #   x_gathered on GPU 0 (shape: [58, h])\n        #  +------------------------------------------------+\n        #  |                                                |\n        #  |  Block of 15 tokens RECEIVED from GPU 0        |\n        #  |  (Contains 10 tokens for MY E0, 5 for MY E1)   |\n        #  |                                                |\n        #  +------------------------------------------------+  &lt;-- Boundary at index 14\n        #  |                                                |\n        #  |  Block of 13 tokens RECEIVED from GPU 1        |\n        #  |  (Contains 9 tokens for MY E0, 4 for MY E1)    |\n        #  |                                                |\n        #  +------------------------------------------------+  &lt;-- Boundary at index 27 (14+13)\n        #  |                                                |\n        #  |  Block of 16 tokens RECEIVED from GPU 2        |\n        #  |  (Contains 14 tokens for MY E0, 2 for MY E1)   |\n        #  |                                                |\n        #  +------------------------------------------------+  &lt;-- Boundary at index 43 (27+16)\n        #  |                                                |\n        #  |  Block of 14 tokens RECEIVED from GPU 3        |\n        #  |  (Contains 3 tokens for MY E0, 11 for MY E1)   |\n        #  |                                                |\n        #  +------------------------------------------------+  &lt;-- Final boundary at index 57\n\n        #   Target layout for x_gathered (shape: [58, h])\n        #  +------------------------------------------------+\n        #  |                                                |\n        #  |  All 36 tokens for MY Expert 0                 |\n        #  |  (Gathered from the 4 blocks above)            |\n        #  |                                                |\n        #  +------------------------------------------------+  &lt;-- Boundary at index 35\n        #  |                                                |\n        #  |  All 22 tokens for MY Expert 1                 |\n        #  |  (Gathered from the 4 blocks above)            |\n        #  |                                                |\n        #  +------------------------------------------------+ \n\n        # target for num_tokens_per_expert_group\n        #    [36, 22]\n\n\n        # Reshape to see GPU-expert structure\n        tokens = num_tokens_per_expert_group.view(-1, ep_size)  \n        # Shape: [4, 2] where dim0=GPU, dim1=expert\n        # [[10,  5],  &lt;- GPU 0: 10 tokens for E0, 5 for E1\n        #  [ 9,  4],  &lt;- GPU 1: 9 tokens for E0, 4 for E1\n        #  [14,  2],  &lt;- GPU 2: 14 tokens for E0, 2 for E1\n        #  [ 3, 11]]  &lt;- GPU 3: 3 tokens for E0, 11 for E1\n        expert_per_device = num_tokens_per_expert_group.shape[0] // ep_size\n        expert_ids = torch.repeat_interleave(\n            torch.arange(expert_per_device).repeat(ep_size).to('cuda'),  # [0, 1, 0, 1, 0, 1, 0, 1] - expert pattern\n            num_tokens_per_expert_group  # [10,5,9,4,14,2,3,11] - repeat counts\n        )\n        \n        # index looks like\n        # tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 15, 16, 17, 18, 19, 20, 21, 22,\n        # 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46,\n        # 10, 11, 12, 13, 14, 24, 25, 26, 27, 42, 43, 47, 48, 49, 50, 51, 52, 53,\n        # 54, 55, 56, 57])\n        self.index = torch.argsort(expert_ids, stable=True)\n        x_reorganized = x_gathered[self.index, :]\n\n        # per expert aggregation\n        num_tokens_per_expert_group_agg = tokens.sum(dim=1)\n\n        return x_reorganized, num_tokens_per_expert_group_agg"
  },
  {
    "objectID": "posts/expert_parallel.html#the-three-boxes-in-the-forward",
    "href": "posts/expert_parallel.html#the-three-boxes-in-the-forward",
    "title": "Expert Parallel",
    "section": "The Three “Boxes” in the Forward",
    "text": "The Three “Boxes” in the Forward\n\nNon-experts: FSDP(8) across all ranks\nall_gather(8) → compute → reduce_scatter(8)\nEP dispatch/return: row-local all-to-all\nPairs: (0↔1), (2↔3), (4↔5), (6↔7). Size-exchange then A2A.\nExperts: FSDP(4) inside each column\nall_gather(4) → grouped GEMM → reduce_scatter(4)\n\nFor visually initiated folks, here is how the placement looks:\n\nInteractive Visualization\n🎮 View Interactive 3D Visualization - See how data flows through the Non-MoE, MoE FSDP, and Token Routing layers."
  },
  {
    "objectID": "posts/expert_parallel.html#minimal-mesh-wrapping",
    "href": "posts/expert_parallel.html#minimal-mesh-wrapping",
    "title": "Expert Parallel",
    "section": "Minimal Mesh & Wrapping",
    "text": "Minimal Mesh & Wrapping\n\n# 0) EP: assign experts to columns + install dispatch/combine hooks\nparallelize_module(\n    model, device_mesh=col_mesh,\n    parallelize_plan={\"layers.*.moe.experts\": ExpertParallel()},\n)\n\n# 1) FSDP on experts (rows): shard column-local experts across rows\nfor tb in model.transformer_blocks:\n    if getattr(tb, \"moe_enabled\", False):\n        fully_shard(tb.moe.experts, mesh=row_mesh, reshard_after_forward=False)\n\n# 2) FSDP on each block (dp): shard non-MoE 8-way\nfor tb in model.transformer_blocks:\n    fully_shard(tb, mesh=dp_mesh, reshard_after_forward=False)   # experts already DTensors on rows\n\n# 3) FSDP on root (dp): embeddings / head / leftovers\nfully_shard(model, mesh=dp_mesh, reshard_after_forward=True)     # True/False per memory tradeoff"
  },
  {
    "objectID": "posts/expert_parallel.html#pseudo-forward-annotated",
    "href": "posts/expert_parallel.html#pseudo-forward-annotated",
    "title": "Expert Parallel",
    "section": "Pseudo-Forward (annotated)",
    "text": "Pseudo-Forward (annotated)\ndef forward_on_rank(row, col, x_rc):\n    # A) Non-MoE on dp: AG(8) → compute → RS(8)\n    h = non_moE_stack(x_rc)\n\n    # Router: expert id per token (e.g., [2,2,5,1,6,...])\n    eids = router(h)\n\n    # B) EP dispatch within this row: send tokens to owner column\n    h_owned = ep_a2a_dispatch(h, eids, group={(row,0),(row,1)})\n\n    # C) Experts on owner column: FSDP(4) across rows of this column\n    y_local = experts_matmul(h_owned)           # AG(4) → GEMM → RS(4)\n\n    # D) EP combine within this row: inverse A2A back to source rank\n    y = ep_a2a_combine(y_local, eids, group={(row,0),(row,1)})\n\n    # E) Tail Non-MoE on dp: AG(8) → compute → RS(8)\n    out = non_moE_tail(y)\n    return out\nBackward (intuition): EP’s A2A autograd returns activation grads to sources; expert parameter grads are reduce-scattered across the row group (the 4 that shard that expert). Non-MoE grads reduce-scatter across all 8."
  },
  {
    "objectID": "posts/expert_parallel.html#after-parallelization-expected-placements-and-how-to-print-them",
    "href": "posts/expert_parallel.html#after-parallelization-expected-placements-and-how-to-print-them",
    "title": "Expert Parallel",
    "section": "After Parallelization: Expected Placements (and how to print them)",
    "text": "After Parallelization: Expected Placements (and how to print them)\n\nLegend\n\n(Shard(dim=0),) → Non-MoE params sharded on a 1-D mesh (flattened dp → 8-way).\n(_StridedShard(dim=0, sf=2), Shard(dim=0)) → Experts are split on two mesh axes of the same tensor dim-0 (experts):\n\nShard(dim=0) on cols (EP ownership).\n_StridedShard(dim=0, sf=2) on rows (FSDP across 4 rows, after a prior split by 2 cols).\n\n\nNo replication — this is a 2-D partition of expert dim-0.\ndef show_placements(model, keys=(\"moe.experts\",\"attention\",\"router\",\"embeddings\",\"norm\",\"output\")):\n    for name, p in model.named_parameters():\n        if any(k in name for k in keys):\n            pl = getattr(p, \"placements\", None)\n            kind = \"DTensor\" if pl is not None else \"LOCAL\"\n            print(f\"{name:&lt;60} -&gt; {kind:7} {pl}\")\nExample lines you should see (shape may vary; this is pattern):\ntok_embeddings.weight                                   -&gt; DTensor (Shard(dim=0),)\nlayers.0.attention.wq.weight                            -&gt; DTensor (Shard(dim=0),)\nlayers.0.feed_forward.router.router.weight              -&gt; DTensor (Shard(dim=0),)\nlayers.0.feed_forward.experts.w1                        -&gt; DTensor (_StridedShard(dim=0, sf=2), Shard(dim=0))\nlayers.0.feed_forward.experts.w2                        -&gt; DTensor (_StridedShard(dim=0, sf=2), Shard(dim=0))\nlayers.0.feed_forward.experts.w3                        -&gt; DTensor (_StridedShard(dim=0, sf=2), Shard(dim=0))\n...\n\n\nMini visual for _StridedShard(dim=0, sf=2)\nexperts dim-0:  [ 0 1 2 3 | 4 5 6 7 ]\n                 ^^^^^^^^   ^^^^^^^^\n                 col 0       col 1     (EP: Shard dim-0 by columns)\n\nwithin each column (rows=4):\ncol 0 → row shards of [0 1 2 3]   → rows 0..3 each get 1 id\ncol 1 → row shards of [4 5 6 7]   → rows 0..3 each get 1 id\n\nDTensor encodes \"shard dim-0 again on rows\" as _StridedShard(dim=0, sf=2)\n(sf=2 because dim-0 was already split once by the 2 columns)."
  },
  {
    "objectID": "posts/expert_parallel.html#why-ep2-and-not-ep8",
    "href": "posts/expert_parallel.html#why-ep2-and-not-ep8",
    "title": "Expert Parallel",
    "section": "Why EP=2 and not EP=8?",
    "text": "Why EP=2 and not EP=8?\n\nEP=2 + rows=4 (this README):\n\nMemory: experts are also sharded (rows).\nComms: A2A is 2-way (cheap).\nCompute: healthy per-expert batches per device → efficient grouped GEMM.\n\nEP=8 + rows=1:\n\nNo rows left → cannot FSDP-shard expert weights (higher memory).\nA2A is 8-way (heavier comms) and per-expert batches per GPU get tiny (worse efficiency).\nYou can still FSDP(8) non-MoE, but overall MoE trade-offs are usually worse."
  },
  {
    "objectID": "posts/expert_parallel.html#sanity-checklist",
    "href": "posts/expert_parallel.html#sanity-checklist",
    "title": "Expert Parallel",
    "section": "Sanity Checklist",
    "text": "Sanity Checklist\n\nNon-MoE params print one placement → (Shard(dim=0),) (FSDP-8 on dp).\nExpert params print two placements → (_StridedShard(0,sf=2), Shard(0)) (rows×cols).\nNo Replicate() in placements → no persistent replication.\nEP A2A pairs (0↔︎1), (2↔︎3), (4↔︎5), (6↔︎7) — microbatches can differ (size-exchange + variable-size A2A)."
  },
  {
    "objectID": "posts/expert_parallel.html#appendix-dataloader-on-flattened-dp",
    "href": "posts/expert_parallel.html#appendix-dataloader-on-flattened-dp",
    "title": "Expert Parallel",
    "section": "Appendix: Dataloader on Flattened dp",
    "text": "Appendix: Dataloader on Flattened dp\n# Use the flattened 8-way dp mesh for sampling\nglobal_dp_rank = dp_mesh.get_rank()\nnum_replicas   = dp_mesh.size()\n\nfrom torch.utils.data import DistributedSampler, DataLoader\nsampler = DistributedSampler(dataset, num_replicas=num_replicas, rank=global_dp_rank)\nloader  = DataLoader(dataset, batch_size=per_rank_bs, sampler=sampler, pin_memory=True)\nThis preserves 8 microbatches per step—one per rank—while placements and collectives follow the mesh rules above."
  }
]